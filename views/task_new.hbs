
    <div class="row">
      <div class="col-md-6">
          <textarea id="code-screen">{{content}}</textarea>
      </div>
      
      <div class="col-md-3" id="chatbox">
        <div class="card border-primary">
          
          <div id="video-container">
            
              <div class="row justify-content-center my-3">
                <div class="col-md-4 mx-1 pb-2 video-wrapper">
                      <div id="my-video"></div>
                </div>
              </div>
              
              <div class="my-2 px-3">
                   <a href="#" class="btn btn-sm btn-success text-white" id="share-screen">Share Screen</a>
                   <a href="#" class="btn btn-sm btn-danger" id="end-call">End Call</a> 
                </p>
              </div>
          </div>

          <div class="m-md-3 m-sm-1 border border-primary">
            <div class="card-header bg-primary text-white">
              Chat Room - 
              <span class="text-white float-right" id="chatbox-username">
                {{#if user  }}
                    {{user.name}}
                {{/if}}
              </span>
            </div>
            <div class="card-body" id="chatbox-container"></div>
            <div class="card-footer">
              <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Enter Message..." id="userMessage" aria-label="Recipient's username" aria-describedby="basic-addon2">
                <span class="input-group-text bg-secondary text-white" onclick="sendMessage()" id="sendChatButton">Send</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-md-3" id="video-grid">
        
      </div>
    </div>

    <input type="hidden" value="{{data}}" id="roomId">



<script src="../lib/codemirror.js"></script>
<script src="../mode/javascript/javascript.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>

<script>


    
    //initialize socket IO
    const socket = io();


    var EditorClient = ot.EditorClient;
    var SocketIOAdapter = ot.SocketIOAdapter;
    var CodeMirrorAdapter = ot.CodeMirrorAdapter;

    
    //dom refs
    var $userMessage = $('#userMessage');
    var $codeScreen = $('#code-screen');
    var $userName = $("#chatbox-username");
    var $chatboxContainer = $("#chatbox-container");
    var $roomId = $("#roomId");


    //variables
    var userName;
    var myStream;
    var callStream;
    var callStream;
    var currentPeer;
    var userId;
    var peerList = [];



    
    //get username if user is logged in
    userName = $userName.text().trim();

    //generate random user identifier if user is a guest
    if(userName === ""){
        const userId = Math.floor(Math.random() * 9999).toString();
        userName = "User"+userId;
        $userName.text(userName);
    }
    else{
        userName = userName.replace(" ", "_");
    }

    //set peer id
    userId = userName.trim()+$roomId.val().trim();


    /********************** Editor ***************************/
  
        //get ref to editor
        var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
            lineNumbers: true,
            theme: "monokai"
        });


        var cmClient;
        var code = $('#code-screen').val();

        //set initialize editor content
        function setDefaultEditorContent(str, revision, clients, serverAdapter){
        
            if(code.trim() == ""){
                editor.setValue(str);
            }
        
            cmClient = window.cmClient = new EditorClient(
                revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
            );
        }

        socket.on('doc', function(obj){
            setDefaultEditorContent(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
        })

    /************************ Editor **********************/
  

   
    /************************************ chat *******************/

        //append chat message
        var userMessage = function(name, text){
            return (
            '<div class="card mb-3">'+
                '<div class="row">'+
                '<div class="col-md-2">'+
                    '<img src="https://tse4.mm.bing.net/th?id=OIP.C5I1w7mHW6eZX-8dW0soegHaHa&pid=Api&P=0&w=50&h=50" alt="...">'+
                '</div>'+
                '<div class="col-md-8">'+
                    '<div>'+
                    '<span class="card-text">'+ text + '</span><br/>'+
                    '<small class="text-muted user">'+ name + '</small>'+
                    '</div>'+
                '</div>'+
                '</div>'+
            '</div>'
            );
        }

        function sendMessage(){
            var userMessage = $userMessage.val();
            socket.emit('chatMessage', {message: userMessage, username: userName})
            $userMessage.val('');
        }

        //emit chatMessage event
        socket.on('chatMessage', function(data) {
            $chatboxContainer.append(userMessage(data.username, data.message))
        })

  
  /*************************** chat **********************/


 

  //peer js
 // navigator.mediaDevices.getUserMedia = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia;

  //PeerJs object
  var peer = new Peer(userId);

  //triggers when a successful peer connection is established
  peer.on('open', function(id){
    // emit join room event
    socket.emit('joinRoom', {roomId: $roomId.val(), username: userName, userid: id})
  })



  peer.on('call', function(call){
    calllStream = call;
    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then((stream) => {
      myStream = stream;
      call.answer(stream);
      call.on('stream', function(remoteStream){
        if(!peerList.includes(call.peer)){
          addVideoStream(remoteStream)
          currentPeer = call.peerConnection
          peerList.push(call.peer)
        }
      })
    }).catch((err) => {
      alert(err + " unable to get media1");
    })
    
  });

  peer.on('error', function(err){
    alert(err.message);
    //step2();
  });

  peer.on('disconnected', function(){
    peer.reconnect();
  })

  peer.on('close', function(){
     peer.destroy()
  })

  function callPeer(peerId, myStream){
      
      console.log(peerId);

      //call the just connected user and send my stream along
      const call = peer.call(peerId, myStream);
      const video = document.createElement("video");
     
      //on recieving other user stream
      call.on('stream', function(remoteStream){
          addVideoStream(video, remoteStream)
        /* if(!peerList.includes(call.peer)){
          addVideoStream(remoteStream)
          currentPeer = call.peerConnection
          peerList.push(call.peer)
          
        }
        */
      })

      call.on('close', () => {
         video.remove()
      })
  }
  
  //display my stream
  function addMyVideo(){
    
    let video = document.createElement("video");
    video.muted = true;

    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then((stream) => {
      
      myStream = stream;
      addVideoStream(video, stream)

      /*peer.on('call', function(call){
        call.answer(stream)

        call.on('stream', function(remoteStream){
          const vide = document.createElement("video");
          addVideoStream(vide, remoteStream)
        })
      })
  */
     
        
      //listen for event user connected
      socket.on('userConnected', data => {
        console.log(data.userid);
        callPeer(data.userid, stream) 
      })

    }).catch((err) => {
      alert("unable to get media: " + err);
    })
  }

 
  function addVideoStream(video, stream){
     
     //video.classList.add("video")
     video.srcObject = stream;
     video.addEventListener('loadedmetadata', () => {
       video.play();
     })
     
     document.getElementById("my-video").append(video);
  }

  function stopScreenShare(){
    
    let videoTrack = myStream.getVideoTracks()[0];
    var sender = currentPeer.getSenders().find(function(s){
      return s.track.kind == videoTrack.kind;
    });
    sender.replaceTrack(videoTrack);

  }
  

  //click handlers setup
  $(function(){
     
    
     $('#share-screen').click(function(){

        console.log("screen sharing started...");
        navigator.mediaDevices.getDisplayMedia({
          video: {
            cursor: "always"
          },
          audio: {
            echoCancellation: true,
            noiseSuppression: true
          }
        }).then((stream) => {
           let videoTrack = stream.getVideoTracks()[0];
           videoTrack.onended = function(){
             stopScreenShare()
           }
           let sender = currentPeer.getSenders().find(function(s){
             return s.track.kind == videoTrack.kind
           })
           sender.replaceTrack(videoTrack);
        }).catch(() => {
          alert("Unable to get display media: "+ err)
        })
     })

     $('#end-call').click(function(){
       console.log("ending call")
       socket.emit('endCall', {user: userName})
       //removeRemoteVideo();
     })

     //Retry if getUserMedia falls
     $('#step1-retry').click(function(){
       $('#step1-error').hide();
       step1();
     })

     //get things started
     addMyVideo();

  });


</script>