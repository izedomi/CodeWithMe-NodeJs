
    <div class="row">
      <div class="col-md-7">
          <textarea id="code-screen">{{content}}</textarea>
      </div>
      
      <div class="col-md-5" id="chatbox">
        <div class="card border-primary">
          
          <div id="video-container">
            
              <div class="row justify-content-center my-3">
                <div class="col-md-5 mx-1 pb-2 video-wrapper">
                      <div id="my-video"></div>
                      <p> You </p>
                </div>
                <div class="col-md-5 mx-1 pb-2 video-wrapper">
                    <div id="second-video"></div>
                    <p> Remote </p>
                </div>
              </div>
              
              <div id="step2" class="my-2 px-3">
                  <p> Your ID: <span id="my-id">...</span></p>
                  <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Call User Id..." id="callto-id">
                    <a href="#" class="btn btn-sm btn-success" id="make-call">Call</a>
                  </div>
              </div>

              <div id="step3" class="my-2 px-3">
                   <!--<p>Talk to <span id="second-id">...</span>-->
                   <a href="#" class="btn btn-sm btn-info text-white" id="share-screen">Share Screen</a>
                   <a href="#" class="btn btn-sm btn-danger" id="end-call">End Call</a> 
                </p>
              </div>
          </div>

          <div class="m-md-3 m-sm-1 border border-primary">
            <div class="card-header bg-primary text-white">
              CHAT ROOM
              <span class="text-white float-right" id="chatbox-username">
                {{#if user  }}
                    {{user.name}}
                {{/if}}
              </span>
            </div>
            <div class="card-body" id="chatbox-container"></div>
            <div class="card-footer">
              <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Enter Message..." id="userMessage" aria-label="Recipient's username" aria-describedby="basic-addon2">
                <span class="input-group-text bg-secondary text-white" onclick="sendMessage()" id="sendChatButton">Send</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <input type="hidden" value="{{data}}" id="roomId">



<script src="../lib/codemirror.js"></script>
<script src="../mode/javascript/javascript.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>

<script>

  var EditorClient = ot.EditorClient;
  var SocketIOAdapter = ot.SocketIOAdapter;
  var CodeMirrorAdapter = ot.CodeMirrorAdapter;

  const socket = io();

  var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
    lineNumbers: true,
    theme: "monokai"
  });


  var cmClient;
  var code = $('#code-screen').val();
  function ini(str, revision, clients, serverAdapter){
   
    if(code.trim() == ""){
       editor.setValue(str);
    }
  
    cmClient = window.cmClient = new EditorClient(
      revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
    );
  }

  socket.on('doc', function(obj){
    ini(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
  })


  //dom refs
  var $userMessage = $('#userMessage');
  var $codeScreen = $('#code-screen');
  var $userName = $("#chatbox-username");
  var $chatboxContainer = $("#chatbox-container");
  var $roomId = $("#roomId");


  //variables
  var userName;
  var myStream;
  var callStream;
  var callStream;
  var currentPeer;
  var myPeerId;
  var peerList = [];

  function init(){
    
    userName = $userName.text();
   
    if(userName.trim() === ""){
        const userId = Math.floor(Math.random() * 9999).toString();
        userName = "User"+userId;
        $userName.text(userName);
    }

    myPeerId = userName.trim()+$roomId.val().trim();

    socket.emit('joinRoom', {roomId: $roomId.val(), username: userName})

  }
 
  var userMessage = function(name, text){
    return (
      '<div class="card mb-3">'+
        '<div class="row">'+
          '<div class="col-md-3">'+
            '<img src="https://tse4.mm.bing.net/th?id=OIP.C5I1w7mHW6eZX-8dW0soegHaHa&pid=Api&P=0&w=50&h=50" alt="...">'+
          '</div>'+
          '<div class="col-md-8">'+
            '<div>'+
              '<span class="card-text">'+ text + '</span><br/>'+
              '<small class="text-muted">'+ name + '</small>'+
            '</div>'+
          '</div>'+
        '</div>'+
      '</div>'
    );
  }

  function sendMessage(){
    var userMessage = $userMessage.val();
    socket.emit('chatMessage', {message: userMessage, username: userName})
    $userMessage.val('');
  }

  socket.on('chatMessage', function(data) {
    $chatboxContainer.append(userMessage(data.username, data.message))
  })

  socket.on('hideCallButton', function(data){
    
    if(data.user === userName){
       $("#step2").hide()
       $("#step3").show()
    }
    else{
      $("#step2").show()
      $("#step3").show()
    }
  })

  socket.on('endCall', function(data){
    removeRemoteVideo()
  })

  init()



  //peer js
  navigator.mediaDevices.getUserMedia = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia;

  //PeerJs object
  var peer = new Peer(myPeerId);

  peer.on('open', function(id){
    $('#my-id').text(peer.id);
  })

  peer.on('call', function(call){
    calllStream = call;
    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then((stream) => {
      myStream = stream;
      call.answer(stream);
      call.on('stream', function(remoteStream){
        if(!peerList.includes(call.peer)){
          addRemoteVideo(remoteStream)
          currentPeer = call.peerConnection
          peerList.push(call.peer)
        }
      })
    }).catch((err) => {
      alert(err + " unable to get media1");
    })
    
  });

  peer.on('error', function(err){
    alert(err.message);
    step2();
  });

  peer.on('disconnected', function(){
    peer.reconnect();
  })

  peer.on('close', function(){
     peer.destroy()
  })

  function callPeer(id){
    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then((stream) => {
      myStream = stream;
      let call = peer.call(id, stream);
      callStream = call;
      call.on('stream', function(remoteStream){
        if(!peerList.includes(call.peer)){
          addRemoteVideo(remoteStream)
          currentPeer = call.peerConnection
          peerList.push(call.peer)
          
        }
      })
    }).catch((err) => {
      alert(err + " unable to get media");
    })
  }

  function step1(){
    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then((stream) => {
      myStream = stream;
      addMyVideo(stream)
    }).catch((err) => {
      alert(err + " unable to get media");
    })
  }

  function addRemoteVideo(stream){
     
     let video = document.createElement("video");
     video.classList.add("video")
     video.setAttribute("id", "rem-video");
     video.srcObject = stream;
     video.play();

     document.getElementById("second-video").append(video);
     socket.emit('hideCallButton', {user: userName})
  }

  function removeRemoteVideo(){
    
     callStream.close();
     step2()
     const remoteVideo = document.getElementById("rem-video");
     document.getElementById("second-video").removeChild(remoteVideo);
    

  }

  function addMyVideo(stream){
     let video = document.createElement("video");
     video.classList.add("video")
     video.srcObject = stream;
     video.play();

     document.getElementById("my-video").append(video);
  }

  function stopScreenShare(){
    
    let videoTrack = myStream.getVideoTracks()[0];
    var sender = currentPeer.getSenders().find(function(s){
      return s.track.kind == videoTrack.kind;
    });
    sender.replaceTrack(videoTrack);

  }
  

  //click handlers setup
  $(function(){
     
     $('#make-call').click(function(){
       console.log("make call button pressed!");
       console.log($('#callto-id').val());
       var remotePeerId = $('#callto-id').val()
       callPeer(remotePeerId);
       
     })

     $('#share-screen').click(function(){

        console.log("screen sharing started...");
        navigator.mediaDevices.getDisplayMedia({
          video: {
            cursor: "always"
          },
          audio: {
            echoCancellation: true,
            noiseSuppression: true
          }
        }).then((stream) => {
           let videoTrack = stream.getVideoTracks()[0];
           videoTrack.onended = function(){
             stopScreenShare()
           }
           let sender = currentPeer.getSenders().find(function(s){
             return s.track.kind == videoTrack.kind
           })
           sender.replaceTrack(videoTrack);
        }).catch(() => {
          alert("Unable to get display media: "+ err)
        })
     })

     $('#end-call').click(function(){
       console.log("ending call")

       socket.emit('endCall', {user: userName})
       //removeRemoteVideo();
     })

     //Retry if getUserMedia falls
     $('#step1-retry').click(function(){
       $('#step1-error').hide();
       step1();
     })

     //get things started
     step1();

  });


  function step2(){
    $('#step1, #step3').hide();
    $('#step2').show();
  }

  function step3(){
  
    //$('#second-id').text(call.peer);
    $('#step1, #step2').hide();
    $('#step3').show();
  }



</script>